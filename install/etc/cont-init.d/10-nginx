#!/usr/bin/with-contenv bash

source /assets/functions/00-container
prepare_service
PROCESS_NAME="nginx"

if var_false "${ENABLE_NGINX}" ; then
    print_notice "Disabling Nginx Functionality"
    service_stop 10-Nginx
    service_stop 11-nginx-config-reload
    rm -rf /etc/logrotate.d/nginx
    rm -rf /etc/zabbix/nginx*
    liftoff
    exit 0
fi

### Parse Configuration
sed -i "s#<ACCESS_LOG>#${NGINX_LOG_ACCESS_FILE}#g" /etc/nginx/nginx.conf
sed -i "s#<ACCESS_LOG_LOCATION>#${NGINX_LOG_ACCESS_LOCATION}#g" /etc/nginx/nginx.conf
sed -i "s#<CLIENT_BODY_TIMEOUT>#${NGINX_CLIENT_BODY_TIMEOUT}#g" /etc/nginx/nginx.conf
sed -i "s#<ERROR_LOG>#${NGINX_LOG_ERROR_FILE}#g" /etc/nginx/nginx.conf
sed -i "s#<ERROR_LOG_LEVEL>#${NGINX_LOG_LEVEL_ERROR}#g" /etc/nginx/nginx.conf
sed -i "s#<ERROR_LOG_LOCATION>#${NGINX_LOG_ERROR_LOCATION}#g" /etc/nginx/nginx.conf
sed -i "s#<GROUP>#${NGINX_GROUP}#g" /etc/nginx/nginx.conf
sed -i "s#<KEEPALIVE_REQUESTS>#${NGINX_KEEPALIVE_REQUESTS}#g" /etc/nginx/nginx.conf
sed -i "s#<KEEPALIVE_TIMEOUT>#${NGINX_KEEPALIVE_TIMEOUT}#g" /etc/nginx/nginx.conf
sed -i "s#<SEND_TIMEOUT>#${NGINX_SEND_TIMEOUT}#g" /etc/nginx/nginx.conf
sed -i "s#<UPLOAD_MAX_SIZE>#${NGINX_UPLOAD_MAX_SIZE}#g" /etc/nginx/nginx.conf
sed -i "s#<CLIENT_BODY_BUFFER_SIZE>#${NGINX_CLIENT_BODY_BUFFER_SIZE}#g" /etc/nginx/nginx.conf
sed -i "s#<USER>#${NGINX_USER}#g" /etc/nginx/nginx.conf
sed -i "s#<WORKER_CONNECTIONS>#${NGINX_WORKER_CONNECTIONS}#g" /etc/nginx/nginx.conf
sed -i "s#<WORKER_PROCESSES>#${NGINX_WORKER_PROCESSES}#g" /etc/nginx/nginx.conf
sed -i "s#<WORKER_RLIMIT_NOFILE>#${NGINX_WORKER_RLIMIT_NOFILE}#g" /etc/nginx/nginx.conf
sed -i "s#<FASTCGI_BUFFERS>#${NGINX_FASTCGI_BUFFERS}#g" /etc/nginx/nginx.conf
sed -i "s#<FASTCGI_BUFFER_SIZE>#${NGINX_FASTCGI_BUFFER_SIZE}#g" /etc/nginx/nginx.conf

if var_true "$NGINX_ENABLE_COMPRESSION_BROTLI" ; then
  sed -i "s#<BROTLI_LEVEL>#${NGINX_COMPRESSION_BROTLI_LEVEL}#g" /etc/nginx/nginx.conf.d/compression_brotli.conf
  sed -i "s#<BROTLI_MIN_LENGTH>#${NGINX_COMPRESSION_BROTLI_MIN_LENGTH}#g" /etc/nginx/nginx.conf.d/compression_brotli.conf
  sed -i "s#<BROTLI_TYPES>#${NGINX_COMPRESSION_BROTLI_TYPES}#g" /etc/nginx/nginx.conf.d/compression_brotli.conf
  sed -i "s#<BROTLI_WINDOW>#${NGINX_COMPRESSION_BROTLI_WINDOW}#g" /etc/nginx/nginx.conf.d/compression_brotli.conf
else
  sed -i "\#include/etc/nginx/nginx.conf.d/compression_brotli.conf;#d" /etc/nginx/nginx.conf
fi

if var_true "$NGINX_ENABLE_COMPRESSION_GZIP" ; then
  sed -i "s#<GZIP_BUFFERS>#${NGINX_COMPRESSION_GZIP_BUFFERS}#g" /etc/nginx/nginx.conf.d/compression_gzip.conf
  sed -i "s#<GZIP_DISABLE>#${NGINX_COMPRESSION_GZIP_DISABLE}#g" /etc/nginx/nginx.conf.d/compression_gzip.conf
  sed -i "s#<GZIP_HTTP_VERSION>#${NGINX_COMPRESSION_GZIP_HTTP_VERSION}#g" /etc/nginx/nginx.conf.d/compression_gzip.conf
  sed -i "s#<GZIP_LEVEL>#${NGINX_COMPRESSION_GZIP_LEVEL}#g" /etc/nginx/nginx.conf.d/compression_gzip.conf
  sed -i "s#<GZIP_MIN_LENGTH>#${NGINX_COMPRESSION_GZIP_MIN_LENGTH}#g" /etc/nginx/nginx.conf.d/compression_gzip.conf
  sed -i "s#<GZIP_PROXIED>#${NGINX_COMPRESSION_GZIP_PROXIED}#g" /etc/nginx/nginx.conf.d/compression_gzip.conf
  sed -i "s#<GZIP_TYPES>#${NGINX_COMPRESSION_GZIP_TYPES}#g" /etc/nginx/nginx.conf.d/compression_gzip.conf
  if var_false "$NGINX_COMPRESSION_GZIP_VARY" ; then
    sed -i "\#gzip_vary on;#d" /etc/nginx/nginx.conf.d/compression_gzip.conf
  fi
else
  sed -i "\#include /etc/nginx/nginx.conf.d/compression_gzip.conf;#d" /etc/nginx/nginx.conf
fi

if var_true "$NGINX_ENABLE_DDOS_PROTECTION" ; then
  sed -i "s#<DDOS_CONNECTIONS_PER_IP>#${NGINX_DDOS_CONNECTIONS_PER_IP}#g" /etc/nginx/nginx.conf.d/ddos_protection.conf
  sed -i "s#<DDOS_REQUESTS_PER_IP>#${NGINX_DDOS_REQUESTS_PER_IP}#g" /etc/nginx/nginx.conf.d/ddos_protection.conf
else
  sed -i "\#include /etc/nginx/nginx.conf.d/ddos_protection.conf;#d" /etc/nginx/nginx.conf
fi

if var_false "$NGINX_ENABLE_EPOLL" ; then
  sed -i "\#use_epoll;#d" /etc/nginx/nginx.conf
fi

if var_false "$NGINX_ENABLE_EXPLOIT_PROTECTION" ; then
  sed -i "\#include /etc/nginx/nginx.conf.d/exploit_protection.conf;#d" /etc/nginx/nginx.conf
fi

if var_false "$NGINX_ENABLE_MULTI_ACCEPT" ; then
  sed -i "\#multi_accept on;#d" /etc/nginx/nginx.conf
fi

if var_true "$NGINX_ENABLE_OPEN_FILE_CACHE" ; then
  sed -i "s#<OPEN_FILE_CACHE_MAX>#${NGINX_OPEN_FILE_CACHE_MAX}#g" /etc/nginx/nginx.conf.d/open_file_cache.conf
  sed -i "s#<OPEN_FILE_CACHE_INACTIVE>#${NGINX_OPEN_FILE_CACHE_INACTIVE}#g" /etc/nginx/nginx.conf.d/open_file_cache.conf
  sed -i "s#<OPEN_FILE_CACHE_VALID>#${NGINX_OPEN_FILE_CACHE_VALID}#g" /etc/nginx/nginx.conf.d/open_file_cache.conf
  sed -i "s#<OPEN_FILE_CACHE_MIN_USES>#${NGINX_OPEN_FILE_CACHE_MIN_USES}#g" /etc/nginx/nginx.conf.d/open_file_cache.conf
  sed -i "\#open_file_cache_errors on;#d" /etc/nginx/nginx.conf.d/open_file_cache.conf
else
  sed -i "\#include /etc/nginx/nginx.conf.d/open_file_cache.conf;#d" /etc/nginx/nginx.conf
fi

if var_false "$NGINX_ENABLE_RESET_TIMEDOUT_CONNECTION" ; then
  sed -i "\#reset_timedout_connection#d" /etc/nginx/nginx.conf
fi

if var_true "$NGINX_ENABLE_REVERSE_PROXY" ; then
  sed -i "s#<REAL_IP_HEADER>#${NGINX_REAL_IP_HEADER}#g" /etc/nginx/nginx.conf.d/reverse_proxy.conf
  sed -i "s#<SET_REAL_IP_FROM>#${NGINX_SET_REAL_IP_FROM}#g" /etc/nginx/nginx.conf.d/reverse_proxy.conf
else
  sed -i "\#include /etc/nginx/nginx.conf.d/reverse_proxy.conf;#d" /etc/nginx/nginx.conf
fi

if var_false "$NGINX_ENABLE_SENDFILE" ; then
  sed -i "\#sendfile#d" /etc/nginx/nginx.conf
fi

if var_false "$NGINX_ENABLE_SITE_OPTIMIZATION" ; then
  sed -i "\#include /etc/nginx/nginx.conf.d/site_optimization.conf;#d" /etc/nginx/nginx.conf
fi

if var_false "$NGINX_ENABLE_SERVER_TOKENS" ; then
  sed -i "\#server_tokens off;#d" /etc/nginx/nginx.conf
  sed -i "\#more_clear_headers Server;#d" /etc/nginx/nginx.conf
fi

if var_false "$NGINX_ENABLE_TCPNOPUSH" ; then
  sed -i "\#tcp_nopush#d" /etc/nginx/nginx.conf
fi

if var_false "$NGINX_ENABLE_TCPNODELAY" ; then
  sed -i "\#tcp_nodelay#d" /etc/nginx/nginx.conf
fi

if var_false "$ENABLE_ZABBIX" ; then
  sed -i "\#include /etc/nginx/nginx.conf.d/zabbix.conf;#d" /etc/nginx/nginx.conf
fi

case "$NGINX_MODE" in
  "MAINTENANCE")
    print_warn "MAINTENANCE MODE ACTIVATED - THIS IMAGE WILL NOT SERVE PAGES"
    mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.template
    mv /etc/nginx/conf.d/maintenance.template /etc/nginx.conf.d/maintenance.conf
  ;;
  "NORMAL")
    :
  ;;
  "PROXY")
    sanity_var NGINX_PROXY_URL "No Proxy URL"
    NGINX_ENABLE_CREATE_SAMPLE_HTML=FALSE

    print_notice "Proxy Mode Activated - Proxying all traffic to ${NGINX_PROXY_URL}"
    sed -i "s#<PROXY_URL>#${NGINX_PROXY_URL}#g" /etc/nginx/conf.d/proxy.template
    mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.template
    mv /etc/nginx/conf.d/proxy.template /etc/nginx/conf.d/proxy.conf
  ;;
  "REDIRECT")
    sanity_var NGINX_REDIRECT_URL "No Redirect URL"
    NGINX_ENABLE_CREATE_SAMPLE_HTML=FALSE

    sed -i "s#rewrite \^/(\.\*) .*#rewrite ^/(\.\*) ${NGINX_REDIRECT_URL};#g" /etc/nginx/conf.d/redirect.template

    print_notice "Redirect Mode Activated - Redirecting all traffic to ${NGINX_REDIRECT_URL}"
    mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.template
    mv /etc/nginx/conf.d/redirect.template /etc/nginx/conf.d/redirect.conf
  ;;
  *)
    :
  ;;
esac

if var_true "$NGINX_ENABLE_APPLICATION_CONFIGURATION" ; then
## Configure default.conf
  ### Map Authentication
  case "$NGINX_AUTHENTICATION_TYPE" in
      "BASIC")
        print_notice "Setting Basic Authentication"
        user_num=$(printenv | sort | grep -c '\NGINX_AUTHENTICATION_BASIC_USER.*')
        for (( i = 1; i <= user_num; i++ ))
          do
            basic_user=NGINX_AUTHENTICATION_BASIC_USER${i}
            basic_pass=NGINX_AUTHENTICATION_BASIC_PASS${i}
            print_warn "Creating User: ${!basic_user}"
            htpasswd -b -n ${!basic_user:-$NGINX_AUTHENTICATION_BASIC_USER} ${!basic_pass:-$NGINX_AUTHENTICATION_BASIC_PASS} >> /etc/nginx/nginx.conf.d/authentication/basic_authorized_users
            sed -i '/ server {/a\ \ \  auth_basic "'"${NGINX_AUTHENTICATION_TITLE}"'";\n\ \ \  auth_basic_user_file /etc/nginx/nginx.conf.d/authentication/basic_authorized_users;' /etc/nginx/conf.d/*.conf
          done
      ;;
      "LDAP")
      cat <<EOF > /etc/nginx/nginx.conf.d/authentication/ldap_configuration
        ldap_server ldapserver {
        url "$NGINX_AUTHENTICATION_LDAP_HOST/$NGINX_AUTHENTICATION_LDAP_BASE_DN?$NGINX_AUTHENTICATION_LDAP_ATTRIBUTE?$NGINX_AUTHENTICATION_LDAP_SCOPE?$NGINX_AUTHENTICATION_LDAP_FILTER";
        binddn "$NGINX_AUTHENTICATION_LDAP_BIND_DN";
        binddn_passwd $NGINX_AUTHENTICATION_LDAP_BIND_PW;
        group_attribute $NGINX_AUTHENTICATION_LDAP_GROUP_ATTRIBUTE;
        group_attribute_is_dn on;
        require valid_user;
        satisfy all;
      }
EOF
        sed -i "/ server {/a\ \ \  auth_ldap ""${NGINX_AUTHENTICATION_TITLE}""; auth_ldap_servers ldapserver;" /etc/nginx/conf.d/*.conf
        sed -i "\#include /etc/nginx/conf.d/#i\ \ \ \ include /etc/nginx/nginx.conf.d/authentication/ldap_configuration;" /etc/nginx/nginx.conf
      ;;
      "LLNG")
          sed -i "s#<LLNG_HANDLER_HOST>#$NGINX_AUTHENTICATION_LLNG_HANDLER_HOST#g" /etc/nginx/nginx.conf.d/authentication/llng
          sed -i "s#<LLNG_HANDLER_PORT>#$NGINX_AUTHENTICATION_LLNG_HANDLER_PORT#g" /etc/nginx/nginx.conf.d/authentication/llng
          print_notice "Setting LLNG Authentication"

          header_num=$(printenv | sort | grep -c '\NGINX_AUTHENTICATION_LLNG_ATTRIBUTE.*')
            for (( i = 1; i <= header_num; i++ ))
                do
                  headers=NGINX_AUTHENTICATION_LLNG_ATTRIBUTE${i}
                  IFS=',' read -r -a array <<< "${!headers}"

                  print_notice "Updating Nginx to support receiving attribute from LLNG: '${array[0]}'"

                  echo "fastcgi_param ${array[0]} \$${array[1]};" >> /etc/nginx/nginx.conf.d/authentication/llng_params
                  echo "auth_request_set \$${array[1]} \$${array[2]};" >> /etc/nginx/nginx.conf.d/authentication/llng_auth_request
            done

          sed -i '/server {/a\ \ \ \ \  include /etc/nginx/nginx.conf.d/authentication/llng;' /etc/nginx/conf.d/*.conf
          sed -i '/server {/a\ \ \ \ \  ### LLNG Authentication handler' /etc/nginx/conf.d/*.conf
          sed -i '/location \/ {/a\ \ \ \ \ \ \ \ include /etc/nginx/nginx.conf.d/authentication/llng_auth_request;' /etc/nginx/conf.d/*.conf
          sed -i '/location \/ {/a\ \ \ \ \ \ \ \ ### LLNG Authentication handler' /etc/nginx/conf.d/*.conf
          ;;
      "NONE")
        :
      ;;
     *)
        print_warn "Unknown AUTHENTICATION_TYPE option. Relying on Application Authentication"
     ;;
  esac

  silent sed -i "s#<WEBROOT>#${NGINX_WEBROOT}#g" /etc/nginx/conf.d/*.conf
  silent sed -i "s#<LISTEN_PORT>#${NGINX_LISTEN_PORT}#g" /etc/nginx/conf.d/*.conf
  silent sed -i "s#<WEBROOT>#${NGINX_WEBROOT}#g" /etc/nginx/conf.d/*.template
  silent sed -i "s#<LISTEN_PORT>#${NGINX_LISTEN_PORT}#g" /etc/nginx/conf.d/*.template

  if [[ -v NGINX_INCLUDE_CONFIGURATION ]] ; then
    sed -i "\|### Don't edit past here|a\ \ \ \ \  include ${NGINX_INCLUDE_CONFIGURATION};" /etc/nginx/conf.d/*.conf
  fi



  ### Perform Nginx FastCGI reverse proxy modifications
  if var_true "$NGINX_ENABLE_FASTCGI_HTTPS" ; then
    print_notice "Enable Nginx FastCGI HTTPS Termination Support"
    echo "fastcgi_param  HTTPS 'on';" >> /etc/nginx/fastcgi_params
    PROTOCOL="https://"
  else
    print_notice "Disable Nginx FastCGI HTTPS Termination Support"
    echo "fastcgi_param  HTTPS 'off';" >> /etc/nginx/fastcgi_params
    PROTOCOL="http://"
  fi
else
  print_notice "Not configurating application / default.conf files"
fi

### Set Stage for Future Development and Production Purposes
case "$STAGE" in
  "DEVELOP" | "develop" )
    echo 'fastcgi_param STAGE "DEVELOP";' >> /etc/nginx/fastcgi_params
  ;;
  "PRODUCTION" | "production" | "STAGING" | "staging")
    echo 'fastcgi_param STAGE "PRODUCTION";' >> /etc/nginx/fastcgi_params
  ;;
  *)
    echo 'fastcgi_param STAGE "DEVELOP";' >> /etc/nginx/fastcgi_params
  ;;
esac

#### Create Sample HTML File if doesn't exist
if var_true $NGINX_ENABLE_CREATE_SAMPLE_HTML ; then
  if [ ! -f "${NGINX_WEBROOT}/index.html" ] ; then
     print_notice "Creating sample index.html"
     mkdir -p "${NGINX_WEBROOT}"
     cat <<EOF > "${NGINX_WEBROOT}"/index.html
  <html>
  <title>Default Page</title>
  <h2>Container is working</h2>
  Congratulations! Your Nginx image is working. You are seeing this because you don't have an index.html file in your ${NGINX_WEBROOT} directory.
  </html>
EOF
     chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
  fi
fi

### Force Reset Permissions for Accessibility
mkdir -p "${NGINX_WEBROOT}"
if [ "${FORCE_RESET_PERMISSIONS}" == "TRUE"  ]; then
    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
fi

### Create Log Directories
mkdir -p "${NGINX_LOG_ERROR_LOCATION}" "${NGINX_LOG_ACCESS_LOCATION}"
chown -R "${NGINX_USER}" "${NGINX_LOG_ERROR_LOCATION}" "${NGINX_LOG_ACCESS_LOCATION}"

### Update Logrotate
if [ "${NGINX_LOG_ERROR_LOCATION}" = "${NGINX_LOG_ACCESS_LOCATION}" ] ; then
  sed -i "s#<ERROR_LOG_LOCATION>/\*.log##g" /etc/logrotate.d/nginx
else
  sed -i "s#<ERROR_LOG_LOCATION>#${NGINX_LOG_ERROR_LOCATION}#g" /etc/logrotate.d/nginx
fi
sed -i "s#<ACCESS_LOG_LOCATION>#${NGINX_LOG_ACCESS_LOCATION}#g" /etc/logrotate.d/nginx
sed -i "s#<ACCESS_LOG_LOCATION>#${NGINX_LOG_ACCESS_LOCATION}#g" /etc/nginx/nginx.conf.d/exploit_protection.conf

### Create Temporary Files
mkdir -p /tmp/nginx
chown -R "${NGINX_USER}" /tmp/nginx

liftoff
